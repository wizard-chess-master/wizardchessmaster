At 10:18 PM EDT, August 13, 2025, with castling logic and check recognition failing during gameplay, letâ€™s address these bugs before redeploying. Since the redeploy failed earlier, integrate fixes into the current workflow. Adjust the prompt:

You are Claude Opus 4.1 on Replit AI with image generation enabled. Assist in debugging and redeploying Wizard Chess Master (React/TypeScript/Vite/Express/Socket.IO/PostgreSQL) on Replit to wizardchessmaster.com. Focus on fixing castling logic and check recognition failures, then ensuring a successful redeploy. Provide step-by-step guidance, code snippets, and explanations. Generate images for debug flows (e.g., "Generate image: Flowchart for castling/check fix").

Tasks in order:

1. Diagnose castling logic: Check `movesCore.ts` or `gameLogic.ts` for castling rules (e.g., king moves 3 squares, rook placement), test with a castling move.
2. Fix check recognition: Update `gameState.ts` to detect king threats across the 10x10 board, including wizard attacks.
3. Verify fixes: Run unit tests (e.g., Jest/Vitest) for castling and check scenarios.
4. Retry deployment: Run `npm run build && git push origin main && kill 1 && npm start` after resolving conflicts.
5. Test deployment: Visit wizardchessmaster.com, test castling and check in a game.

Respond sequentially per task, ask for confirmation before next. Use code blocks for snippets.

---

### Task 1: Diagnose Castling Logic
- Open `movesCore.ts` or `gameLogic.ts`, locate castling function (e.g., `isValidCastling`).
- Check if king moves 3 squares, rooks adjust, and no pieces block. Example issue:
  ```typescript
  // movesCore.ts
  function isValidCastling(state, move) {
    if (move.from.x !== 5 || Math.abs(move.to.x - move.from.x) !== 3) return false; // 10x10, adjust indices
    // Current logic might not handle 3-square move
  }
  ```
- Simulate a castling move (e.g., king from e1 to h1), note failure.
- Confirm with diagnosis (e.g., log or test case).

### Task 2: Fix Check Recognition
- Open `gameState.ts`, update `isKingInCheck` to scan 2-square wizard attacks:
  ```typescript
  // gameState.ts
  function isKingInCheck(state, color) {
    const kingPos = findKing(state, color);
    for (let dx = -2; dx <= 2; dx++) for (let dy = -2; dy <= 2; dy++) {
      if (dx === 0 && dy === 0) continue;
      const target = { x: kingPos.x + dx, y: kingPos.y + dy };
      if (isWizardAttack(state, target, oppositeColor(color))) return true;
    }
    return false;
  }
  ```
- Confirm with updated code.

### Task 3: Verify Fixes
- Add tests in `chess.test.ts`:
  ```typescript
  // chess.test.ts
  import { isValidCastling, isKingInCheck } from './gameLogic';

  test('Castling 3 squares', () => {
    expect(isValidCastling(initialState, { from: { x: 5, y: 0 }, to: { x: 8, y: 0 } })).toBe(true);
  });
  test('Check from wizard', () => {
    expect(isKingInCheck(stateWithWizard, 'white')).toBe(true);
  });
  ```
- Run `npm test`, confirm passing.
- Confirm with test results.

### Task 4: Retry Deployment
- Run:
  ```bash
  npm run build && git push origin main && kill 1 && npm start
  ```
- Confirm with output.

### Task 5: Test Deployment
- Test on wizardchessmaster.com, provide feedback.

Start with Task 1.