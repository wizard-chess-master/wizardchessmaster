You are Claude Opus 4.1 on Replit AI with image generation enabled. Assist in resolving display issues with Wizard Chess Master (React/TypeScript/Vite/Express/Socket.IO/PostgreSQL) on Replit for wizardchessmaster.com. Focus on fixing the board resize issue and mismatched frame size (right side and bottom out of view on initial load and full screen toggle) across variable displays. Provide step-by-step guidance, code snippets, and explanations. Generate images for layout diagrams (e.g., "Generate image: Flowchart for board display fix").
Tasks in order:

Diagnose display issue: Review client/src/components/chess/ChessBoard.tsx for sizing and container logic, identify why edges are cut off on initial load and resize.
Adjust layout and sizing: Update ChessBoard.tsx with dynamic padding and alignment to ensure the board fits within the viewport on all screen sizes and transitions.
Test locally: Run npm run dev in Replit Shell, simulate various displays (e.g., 2560x1664, 375x667), and toggle full screen to verify fit.
Generate layout image: Create a diagram showing the board fitting across resolutions with no overflow.
Redeploy: Run npm run build && git push origin main && kill 1 && npm start, test live on wizardchessmaster.com.

Respond sequentially per task, ask for confirmation before next. Use code blocks for snippets.

Task 1: Diagnose Display Issue

Open client/src/components/chess/ChessBoard.tsx.
Check useEffect for handleResize and container class (e.g., flex justify-center items-start p-2).
Identify issues: Fixed sizeFactor or lack of padding might cause edges to exceed viewport on initial load or full screen.
Confirm with current code snippet or description of the problem.

Task 2: Adjust Layout and Sizing

Update ChessBoard.tsx:
typescript// client/src/components/chess/ChessBoard.tsx
import { useEffect, useRef } from 'react';

const ChessBoard = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const handleResize = () => {
      const canvas = canvasRef.current;
      if (canvas) {
        const padding = 20;
        const maxWidth = window.innerWidth - padding * 2;
        const maxHeight = window.innerHeight - padding * 2;
        let sizeFactor = 0.7;
        if (window.innerWidth <= 768) sizeFactor = 0.9;
        else if (window.innerWidth <= 1024) sizeFactor = 0.8;
        else if (window.innerWidth > 2560) sizeFactor = 0.6;
        const size = Math.min(maxWidth * sizeFactor, maxHeight * sizeFactor);
        canvas.width = size;
        canvas.height = size;
      }
    };

    handleResize();
    window.addEventListener('resize', handleResize);
    window.addEventListener('fullscreenchange', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('fullscreenchange', handleResize);
    };
  }, []);

  return (
    <div className="flex justify-center items-start p-2 w-full h-screen overflow-hidden">
      <canvas ref={canvasRef} className="bg-gray-800 border-4 border-yellow-600" />
    </div>
  );
};

export default ChessBoard;

Changes: Added overflow-hidden to prevent scrollbars, ensured w-full h-screen uses full viewport, adjusted sizeFactor for balance.
Confirm with updated code.

Task 3: Test Locally

Run npm run dev in Replit Shell.
Use browser dev tools (Option + Command + I, toggle device toolbar) to test 2560x1664, 375x667, and toggle full screen.
Confirm the board fits with no edges cut off.
Provide test results.

Task 4: Generate Layout Image

Generate image: "Responsive game board layout across resolutions" (show 2560x1664, 375x667, full screen with no overflow).
Confirm with image description.

Task 5: Redeploy

Run:
bashnpm run build && git push origin main && kill 1 && npm start

Test live, provide feedback.

Start with Task 1.7.8s